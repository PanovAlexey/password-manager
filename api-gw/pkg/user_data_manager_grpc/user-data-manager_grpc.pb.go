// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/user-data-manager.proto

package user_data_manager_grpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserDataManagerClient is the client API for UserDataManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDataManagerClient interface {
	GetLoginPasswordList(ctx context.Context, in *GetLoginPasswordListRequest, opts ...grpc.CallOption) (*GetLoginPasswordListResponse, error)
	CreateLoginPassword(ctx context.Context, in *CreateLoginPasswordRequest, opts ...grpc.CallOption) (*CreateLoginPasswordResponse, error)
	GetLoginPasswordById(ctx context.Context, in *GetLoginPasswordByIdRequest, opts ...grpc.CallOption) (*GetLoginPasswordByIdResponse, error)
	PatchLoginPasswordById(ctx context.Context, in *PatchLoginPasswordByIdRequest, opts ...grpc.CallOption) (*PatchLoginPasswordByIdResponse, error)
	DeleteLoginPasswordById(ctx context.Context, in *DeleteLoginPasswordByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetCreditCardList(ctx context.Context, in *GetCreditCardListRequest, opts ...grpc.CallOption) (*GetCreditCardListResponse, error)
	CreateCreditCard(ctx context.Context, in *CreateCreditCardRequest, opts ...grpc.CallOption) (*CreateCreditCardResponse, error)
	GetCreditCardById(ctx context.Context, in *GetCreditCardByIdRequest, opts ...grpc.CallOption) (*GetCreditCardByIdResponse, error)
	PatchCreditCardById(ctx context.Context, in *PatchCreditCardByIdRequest, opts ...grpc.CallOption) (*PatchCreditCardByIdResponse, error)
	DeleteCreditCardById(ctx context.Context, in *DeleteCreditCardByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetTextRecordList(ctx context.Context, in *GetTextRecordListRequest, opts ...grpc.CallOption) (*GetTextRecordListResponse, error)
	CreateTextRecord(ctx context.Context, in *CreateTextRecordRequest, opts ...grpc.CallOption) (*CreateTextRecordResponse, error)
	GetTextRecordById(ctx context.Context, in *GetTextRecordByIdRequest, opts ...grpc.CallOption) (*GetTextRecordByIdResponse, error)
	PatchTextRecordById(ctx context.Context, in *PatchTextRecordByIdRequest, opts ...grpc.CallOption) (*PatchTextRecordByIdResponse, error)
	DeleteTextRecordById(ctx context.Context, in *DeleteTextRecordByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetBinaryRecordList(ctx context.Context, in *GetBinaryRecordListRequest, opts ...grpc.CallOption) (*GetBinaryRecordListResponse, error)
	CreateBinaryRecord(ctx context.Context, in *CreateBinaryRecordRequest, opts ...grpc.CallOption) (*CreateBinaryRecordResponse, error)
	GetBinaryRecordById(ctx context.Context, in *GetBinaryRecordByIdRequest, opts ...grpc.CallOption) (*GetBinaryRecordByIdResponse, error)
	PatchBinaryRecordById(ctx context.Context, in *PatchBinaryRecordByIdRequest, opts ...grpc.CallOption) (*PatchBinaryRecordByIdResponse, error)
	DeleteBinaryRecordById(ctx context.Context, in *DeleteBinaryRecordByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type userDataManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDataManagerClient(cc grpc.ClientConnInterface) UserDataManagerClient {
	return &userDataManagerClient{cc}
}

func (c *userDataManagerClient) GetLoginPasswordList(ctx context.Context, in *GetLoginPasswordListRequest, opts ...grpc.CallOption) (*GetLoginPasswordListResponse, error) {
	out := new(GetLoginPasswordListResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/GetLoginPasswordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) CreateLoginPassword(ctx context.Context, in *CreateLoginPasswordRequest, opts ...grpc.CallOption) (*CreateLoginPasswordResponse, error) {
	out := new(CreateLoginPasswordResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/CreateLoginPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) GetLoginPasswordById(ctx context.Context, in *GetLoginPasswordByIdRequest, opts ...grpc.CallOption) (*GetLoginPasswordByIdResponse, error) {
	out := new(GetLoginPasswordByIdResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/GetLoginPasswordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) PatchLoginPasswordById(ctx context.Context, in *PatchLoginPasswordByIdRequest, opts ...grpc.CallOption) (*PatchLoginPasswordByIdResponse, error) {
	out := new(PatchLoginPasswordByIdResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/PatchLoginPasswordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) DeleteLoginPasswordById(ctx context.Context, in *DeleteLoginPasswordByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/DeleteLoginPasswordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) GetCreditCardList(ctx context.Context, in *GetCreditCardListRequest, opts ...grpc.CallOption) (*GetCreditCardListResponse, error) {
	out := new(GetCreditCardListResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/GetCreditCardList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) CreateCreditCard(ctx context.Context, in *CreateCreditCardRequest, opts ...grpc.CallOption) (*CreateCreditCardResponse, error) {
	out := new(CreateCreditCardResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/CreateCreditCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) GetCreditCardById(ctx context.Context, in *GetCreditCardByIdRequest, opts ...grpc.CallOption) (*GetCreditCardByIdResponse, error) {
	out := new(GetCreditCardByIdResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/GetCreditCardById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) PatchCreditCardById(ctx context.Context, in *PatchCreditCardByIdRequest, opts ...grpc.CallOption) (*PatchCreditCardByIdResponse, error) {
	out := new(PatchCreditCardByIdResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/PatchCreditCardById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) DeleteCreditCardById(ctx context.Context, in *DeleteCreditCardByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/DeleteCreditCardById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) GetTextRecordList(ctx context.Context, in *GetTextRecordListRequest, opts ...grpc.CallOption) (*GetTextRecordListResponse, error) {
	out := new(GetTextRecordListResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/GetTextRecordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) CreateTextRecord(ctx context.Context, in *CreateTextRecordRequest, opts ...grpc.CallOption) (*CreateTextRecordResponse, error) {
	out := new(CreateTextRecordResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/CreateTextRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) GetTextRecordById(ctx context.Context, in *GetTextRecordByIdRequest, opts ...grpc.CallOption) (*GetTextRecordByIdResponse, error) {
	out := new(GetTextRecordByIdResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/GetTextRecordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) PatchTextRecordById(ctx context.Context, in *PatchTextRecordByIdRequest, opts ...grpc.CallOption) (*PatchTextRecordByIdResponse, error) {
	out := new(PatchTextRecordByIdResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/PatchTextRecordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) DeleteTextRecordById(ctx context.Context, in *DeleteTextRecordByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/DeleteTextRecordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) GetBinaryRecordList(ctx context.Context, in *GetBinaryRecordListRequest, opts ...grpc.CallOption) (*GetBinaryRecordListResponse, error) {
	out := new(GetBinaryRecordListResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/GetBinaryRecordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) CreateBinaryRecord(ctx context.Context, in *CreateBinaryRecordRequest, opts ...grpc.CallOption) (*CreateBinaryRecordResponse, error) {
	out := new(CreateBinaryRecordResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/CreateBinaryRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) GetBinaryRecordById(ctx context.Context, in *GetBinaryRecordByIdRequest, opts ...grpc.CallOption) (*GetBinaryRecordByIdResponse, error) {
	out := new(GetBinaryRecordByIdResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/GetBinaryRecordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) PatchBinaryRecordById(ctx context.Context, in *PatchBinaryRecordByIdRequest, opts ...grpc.CallOption) (*PatchBinaryRecordByIdResponse, error) {
	out := new(PatchBinaryRecordByIdResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/PatchBinaryRecordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) DeleteBinaryRecordById(ctx context.Context, in *DeleteBinaryRecordByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/DeleteBinaryRecordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDataManagerServer is the server API for UserDataManager service.
// All implementations must embed UnimplementedUserDataManagerServer
// for forward compatibility
type UserDataManagerServer interface {
	GetLoginPasswordList(context.Context, *GetLoginPasswordListRequest) (*GetLoginPasswordListResponse, error)
	CreateLoginPassword(context.Context, *CreateLoginPasswordRequest) (*CreateLoginPasswordResponse, error)
	GetLoginPasswordById(context.Context, *GetLoginPasswordByIdRequest) (*GetLoginPasswordByIdResponse, error)
	PatchLoginPasswordById(context.Context, *PatchLoginPasswordByIdRequest) (*PatchLoginPasswordByIdResponse, error)
	DeleteLoginPasswordById(context.Context, *DeleteLoginPasswordByIdRequest) (*empty.Empty, error)
	GetCreditCardList(context.Context, *GetCreditCardListRequest) (*GetCreditCardListResponse, error)
	CreateCreditCard(context.Context, *CreateCreditCardRequest) (*CreateCreditCardResponse, error)
	GetCreditCardById(context.Context, *GetCreditCardByIdRequest) (*GetCreditCardByIdResponse, error)
	PatchCreditCardById(context.Context, *PatchCreditCardByIdRequest) (*PatchCreditCardByIdResponse, error)
	DeleteCreditCardById(context.Context, *DeleteCreditCardByIdRequest) (*empty.Empty, error)
	GetTextRecordList(context.Context, *GetTextRecordListRequest) (*GetTextRecordListResponse, error)
	CreateTextRecord(context.Context, *CreateTextRecordRequest) (*CreateTextRecordResponse, error)
	GetTextRecordById(context.Context, *GetTextRecordByIdRequest) (*GetTextRecordByIdResponse, error)
	PatchTextRecordById(context.Context, *PatchTextRecordByIdRequest) (*PatchTextRecordByIdResponse, error)
	DeleteTextRecordById(context.Context, *DeleteTextRecordByIdRequest) (*empty.Empty, error)
	GetBinaryRecordList(context.Context, *GetBinaryRecordListRequest) (*GetBinaryRecordListResponse, error)
	CreateBinaryRecord(context.Context, *CreateBinaryRecordRequest) (*CreateBinaryRecordResponse, error)
	GetBinaryRecordById(context.Context, *GetBinaryRecordByIdRequest) (*GetBinaryRecordByIdResponse, error)
	PatchBinaryRecordById(context.Context, *PatchBinaryRecordByIdRequest) (*PatchBinaryRecordByIdResponse, error)
	DeleteBinaryRecordById(context.Context, *DeleteBinaryRecordByIdRequest) (*empty.Empty, error)
	mustEmbedUnimplementedUserDataManagerServer()
}

// UnimplementedUserDataManagerServer must be embedded to have forward compatible implementations.
type UnimplementedUserDataManagerServer struct {
}

func (UnimplementedUserDataManagerServer) GetLoginPasswordList(context.Context, *GetLoginPasswordListRequest) (*GetLoginPasswordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginPasswordList not implemented")
}
func (UnimplementedUserDataManagerServer) CreateLoginPassword(context.Context, *CreateLoginPasswordRequest) (*CreateLoginPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoginPassword not implemented")
}
func (UnimplementedUserDataManagerServer) GetLoginPasswordById(context.Context, *GetLoginPasswordByIdRequest) (*GetLoginPasswordByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginPasswordById not implemented")
}
func (UnimplementedUserDataManagerServer) PatchLoginPasswordById(context.Context, *PatchLoginPasswordByIdRequest) (*PatchLoginPasswordByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchLoginPasswordById not implemented")
}
func (UnimplementedUserDataManagerServer) DeleteLoginPasswordById(context.Context, *DeleteLoginPasswordByIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoginPasswordById not implemented")
}
func (UnimplementedUserDataManagerServer) GetCreditCardList(context.Context, *GetCreditCardListRequest) (*GetCreditCardListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditCardList not implemented")
}
func (UnimplementedUserDataManagerServer) CreateCreditCard(context.Context, *CreateCreditCardRequest) (*CreateCreditCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCreditCard not implemented")
}
func (UnimplementedUserDataManagerServer) GetCreditCardById(context.Context, *GetCreditCardByIdRequest) (*GetCreditCardByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditCardById not implemented")
}
func (UnimplementedUserDataManagerServer) PatchCreditCardById(context.Context, *PatchCreditCardByIdRequest) (*PatchCreditCardByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchCreditCardById not implemented")
}
func (UnimplementedUserDataManagerServer) DeleteCreditCardById(context.Context, *DeleteCreditCardByIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCreditCardById not implemented")
}
func (UnimplementedUserDataManagerServer) GetTextRecordList(context.Context, *GetTextRecordListRequest) (*GetTextRecordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTextRecordList not implemented")
}
func (UnimplementedUserDataManagerServer) CreateTextRecord(context.Context, *CreateTextRecordRequest) (*CreateTextRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTextRecord not implemented")
}
func (UnimplementedUserDataManagerServer) GetTextRecordById(context.Context, *GetTextRecordByIdRequest) (*GetTextRecordByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTextRecordById not implemented")
}
func (UnimplementedUserDataManagerServer) PatchTextRecordById(context.Context, *PatchTextRecordByIdRequest) (*PatchTextRecordByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchTextRecordById not implemented")
}
func (UnimplementedUserDataManagerServer) DeleteTextRecordById(context.Context, *DeleteTextRecordByIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTextRecordById not implemented")
}
func (UnimplementedUserDataManagerServer) GetBinaryRecordList(context.Context, *GetBinaryRecordListRequest) (*GetBinaryRecordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBinaryRecordList not implemented")
}
func (UnimplementedUserDataManagerServer) CreateBinaryRecord(context.Context, *CreateBinaryRecordRequest) (*CreateBinaryRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBinaryRecord not implemented")
}
func (UnimplementedUserDataManagerServer) GetBinaryRecordById(context.Context, *GetBinaryRecordByIdRequest) (*GetBinaryRecordByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBinaryRecordById not implemented")
}
func (UnimplementedUserDataManagerServer) PatchBinaryRecordById(context.Context, *PatchBinaryRecordByIdRequest) (*PatchBinaryRecordByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchBinaryRecordById not implemented")
}
func (UnimplementedUserDataManagerServer) DeleteBinaryRecordById(context.Context, *DeleteBinaryRecordByIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBinaryRecordById not implemented")
}
func (UnimplementedUserDataManagerServer) mustEmbedUnimplementedUserDataManagerServer() {}

// UnsafeUserDataManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDataManagerServer will
// result in compilation errors.
type UnsafeUserDataManagerServer interface {
	mustEmbedUnimplementedUserDataManagerServer()
}

func RegisterUserDataManagerServer(s grpc.ServiceRegistrar, srv UserDataManagerServer) {
	s.RegisterService(&UserDataManager_ServiceDesc, srv)
}

func _UserDataManager_GetLoginPasswordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginPasswordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).GetLoginPasswordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/GetLoginPasswordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).GetLoginPasswordList(ctx, req.(*GetLoginPasswordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_CreateLoginPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoginPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).CreateLoginPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/CreateLoginPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).CreateLoginPassword(ctx, req.(*CreateLoginPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_GetLoginPasswordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginPasswordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).GetLoginPasswordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/GetLoginPasswordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).GetLoginPasswordById(ctx, req.(*GetLoginPasswordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_PatchLoginPasswordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchLoginPasswordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).PatchLoginPasswordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/PatchLoginPasswordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).PatchLoginPasswordById(ctx, req.(*PatchLoginPasswordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_DeleteLoginPasswordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoginPasswordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).DeleteLoginPasswordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/DeleteLoginPasswordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).DeleteLoginPasswordById(ctx, req.(*DeleteLoginPasswordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_GetCreditCardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreditCardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).GetCreditCardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/GetCreditCardList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).GetCreditCardList(ctx, req.(*GetCreditCardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_CreateCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCreditCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).CreateCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/CreateCreditCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).CreateCreditCard(ctx, req.(*CreateCreditCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_GetCreditCardById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreditCardByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).GetCreditCardById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/GetCreditCardById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).GetCreditCardById(ctx, req.(*GetCreditCardByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_PatchCreditCardById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchCreditCardByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).PatchCreditCardById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/PatchCreditCardById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).PatchCreditCardById(ctx, req.(*PatchCreditCardByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_DeleteCreditCardById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCreditCardByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).DeleteCreditCardById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/DeleteCreditCardById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).DeleteCreditCardById(ctx, req.(*DeleteCreditCardByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_GetTextRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTextRecordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).GetTextRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/GetTextRecordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).GetTextRecordList(ctx, req.(*GetTextRecordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_CreateTextRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTextRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).CreateTextRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/CreateTextRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).CreateTextRecord(ctx, req.(*CreateTextRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_GetTextRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTextRecordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).GetTextRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/GetTextRecordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).GetTextRecordById(ctx, req.(*GetTextRecordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_PatchTextRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchTextRecordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).PatchTextRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/PatchTextRecordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).PatchTextRecordById(ctx, req.(*PatchTextRecordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_DeleteTextRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTextRecordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).DeleteTextRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/DeleteTextRecordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).DeleteTextRecordById(ctx, req.(*DeleteTextRecordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_GetBinaryRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBinaryRecordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).GetBinaryRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/GetBinaryRecordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).GetBinaryRecordList(ctx, req.(*GetBinaryRecordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_CreateBinaryRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBinaryRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).CreateBinaryRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/CreateBinaryRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).CreateBinaryRecord(ctx, req.(*CreateBinaryRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_GetBinaryRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBinaryRecordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).GetBinaryRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/GetBinaryRecordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).GetBinaryRecordById(ctx, req.(*GetBinaryRecordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_PatchBinaryRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchBinaryRecordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).PatchBinaryRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/PatchBinaryRecordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).PatchBinaryRecordById(ctx, req.(*PatchBinaryRecordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_DeleteBinaryRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBinaryRecordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).DeleteBinaryRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/DeleteBinaryRecordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).DeleteBinaryRecordById(ctx, req.(*DeleteBinaryRecordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDataManager_ServiceDesc is the grpc.ServiceDesc for UserDataManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDataManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_data_manager.UserDataManager",
	HandlerType: (*UserDataManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLoginPasswordList",
			Handler:    _UserDataManager_GetLoginPasswordList_Handler,
		},
		{
			MethodName: "CreateLoginPassword",
			Handler:    _UserDataManager_CreateLoginPassword_Handler,
		},
		{
			MethodName: "GetLoginPasswordById",
			Handler:    _UserDataManager_GetLoginPasswordById_Handler,
		},
		{
			MethodName: "PatchLoginPasswordById",
			Handler:    _UserDataManager_PatchLoginPasswordById_Handler,
		},
		{
			MethodName: "DeleteLoginPasswordById",
			Handler:    _UserDataManager_DeleteLoginPasswordById_Handler,
		},
		{
			MethodName: "GetCreditCardList",
			Handler:    _UserDataManager_GetCreditCardList_Handler,
		},
		{
			MethodName: "CreateCreditCard",
			Handler:    _UserDataManager_CreateCreditCard_Handler,
		},
		{
			MethodName: "GetCreditCardById",
			Handler:    _UserDataManager_GetCreditCardById_Handler,
		},
		{
			MethodName: "PatchCreditCardById",
			Handler:    _UserDataManager_PatchCreditCardById_Handler,
		},
		{
			MethodName: "DeleteCreditCardById",
			Handler:    _UserDataManager_DeleteCreditCardById_Handler,
		},
		{
			MethodName: "GetTextRecordList",
			Handler:    _UserDataManager_GetTextRecordList_Handler,
		},
		{
			MethodName: "CreateTextRecord",
			Handler:    _UserDataManager_CreateTextRecord_Handler,
		},
		{
			MethodName: "GetTextRecordById",
			Handler:    _UserDataManager_GetTextRecordById_Handler,
		},
		{
			MethodName: "PatchTextRecordById",
			Handler:    _UserDataManager_PatchTextRecordById_Handler,
		},
		{
			MethodName: "DeleteTextRecordById",
			Handler:    _UserDataManager_DeleteTextRecordById_Handler,
		},
		{
			MethodName: "GetBinaryRecordList",
			Handler:    _UserDataManager_GetBinaryRecordList_Handler,
		},
		{
			MethodName: "CreateBinaryRecord",
			Handler:    _UserDataManager_CreateBinaryRecord_Handler,
		},
		{
			MethodName: "GetBinaryRecordById",
			Handler:    _UserDataManager_GetBinaryRecordById_Handler,
		},
		{
			MethodName: "PatchBinaryRecordById",
			Handler:    _UserDataManager_PatchBinaryRecordById_Handler,
		},
		{
			MethodName: "DeleteBinaryRecordById",
			Handler:    _UserDataManager_DeleteBinaryRecordById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user-data-manager.proto",
}
