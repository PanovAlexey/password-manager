// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/user-data-manager.proto

package user_data_manager_grpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserDataManagerClient is the client API for UserDataManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDataManagerClient interface {
	GetLoginPasswordList(ctx context.Context, in *GetLoginPasswordListRequest, opts ...grpc.CallOption) (*GetLoginPasswordListResponse, error)
	CreateLoginPassword(ctx context.Context, in *CreateLoginPasswordRequest, opts ...grpc.CallOption) (*CreateLoginPasswordResponse, error)
	GetLoginPasswordById(ctx context.Context, in *GetLoginPasswordByIdRequest, opts ...grpc.CallOption) (*GetLoginPasswordByIdResponse, error)
	PatchLoginPasswordById(ctx context.Context, in *PatchLoginPasswordByIdRequest, opts ...grpc.CallOption) (*PatchLoginPasswordByIdResponse, error)
	DeleteLoginPasswordById(ctx context.Context, in *DeleteLoginPasswordByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type userDataManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDataManagerClient(cc grpc.ClientConnInterface) UserDataManagerClient {
	return &userDataManagerClient{cc}
}

func (c *userDataManagerClient) GetLoginPasswordList(ctx context.Context, in *GetLoginPasswordListRequest, opts ...grpc.CallOption) (*GetLoginPasswordListResponse, error) {
	out := new(GetLoginPasswordListResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/GetLoginPasswordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) CreateLoginPassword(ctx context.Context, in *CreateLoginPasswordRequest, opts ...grpc.CallOption) (*CreateLoginPasswordResponse, error) {
	out := new(CreateLoginPasswordResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/CreateLoginPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) GetLoginPasswordById(ctx context.Context, in *GetLoginPasswordByIdRequest, opts ...grpc.CallOption) (*GetLoginPasswordByIdResponse, error) {
	out := new(GetLoginPasswordByIdResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/GetLoginPasswordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) PatchLoginPasswordById(ctx context.Context, in *PatchLoginPasswordByIdRequest, opts ...grpc.CallOption) (*PatchLoginPasswordByIdResponse, error) {
	out := new(PatchLoginPasswordByIdResponse)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/PatchLoginPasswordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerClient) DeleteLoginPasswordById(ctx context.Context, in *DeleteLoginPasswordByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user_data_manager.UserDataManager/DeleteLoginPasswordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDataManagerServer is the server API for UserDataManager service.
// All implementations must embed UnimplementedUserDataManagerServer
// for forward compatibility
type UserDataManagerServer interface {
	GetLoginPasswordList(context.Context, *GetLoginPasswordListRequest) (*GetLoginPasswordListResponse, error)
	CreateLoginPassword(context.Context, *CreateLoginPasswordRequest) (*CreateLoginPasswordResponse, error)
	GetLoginPasswordById(context.Context, *GetLoginPasswordByIdRequest) (*GetLoginPasswordByIdResponse, error)
	PatchLoginPasswordById(context.Context, *PatchLoginPasswordByIdRequest) (*PatchLoginPasswordByIdResponse, error)
	DeleteLoginPasswordById(context.Context, *DeleteLoginPasswordByIdRequest) (*empty.Empty, error)
	mustEmbedUnimplementedUserDataManagerServer()
}

// UnimplementedUserDataManagerServer must be embedded to have forward compatible implementations.
type UnimplementedUserDataManagerServer struct {
}

func (UnimplementedUserDataManagerServer) GetLoginPasswordList(context.Context, *GetLoginPasswordListRequest) (*GetLoginPasswordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginPasswordList not implemented")
}
func (UnimplementedUserDataManagerServer) CreateLoginPassword(context.Context, *CreateLoginPasswordRequest) (*CreateLoginPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoginPassword not implemented")
}
func (UnimplementedUserDataManagerServer) GetLoginPasswordById(context.Context, *GetLoginPasswordByIdRequest) (*GetLoginPasswordByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginPasswordById not implemented")
}
func (UnimplementedUserDataManagerServer) PatchLoginPasswordById(context.Context, *PatchLoginPasswordByIdRequest) (*PatchLoginPasswordByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchLoginPasswordById not implemented")
}
func (UnimplementedUserDataManagerServer) DeleteLoginPasswordById(context.Context, *DeleteLoginPasswordByIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoginPasswordById not implemented")
}
func (UnimplementedUserDataManagerServer) mustEmbedUnimplementedUserDataManagerServer() {}

// UnsafeUserDataManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDataManagerServer will
// result in compilation errors.
type UnsafeUserDataManagerServer interface {
	mustEmbedUnimplementedUserDataManagerServer()
}

func RegisterUserDataManagerServer(s grpc.ServiceRegistrar, srv UserDataManagerServer) {
	s.RegisterService(&UserDataManager_ServiceDesc, srv)
}

func _UserDataManager_GetLoginPasswordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginPasswordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).GetLoginPasswordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/GetLoginPasswordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).GetLoginPasswordList(ctx, req.(*GetLoginPasswordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_CreateLoginPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoginPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).CreateLoginPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/CreateLoginPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).CreateLoginPassword(ctx, req.(*CreateLoginPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_GetLoginPasswordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginPasswordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).GetLoginPasswordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/GetLoginPasswordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).GetLoginPasswordById(ctx, req.(*GetLoginPasswordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_PatchLoginPasswordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchLoginPasswordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).PatchLoginPasswordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/PatchLoginPasswordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).PatchLoginPasswordById(ctx, req.(*PatchLoginPasswordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataManager_DeleteLoginPasswordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoginPasswordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataManagerServer).DeleteLoginPasswordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_data_manager.UserDataManager/DeleteLoginPasswordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataManagerServer).DeleteLoginPasswordById(ctx, req.(*DeleteLoginPasswordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDataManager_ServiceDesc is the grpc.ServiceDesc for UserDataManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDataManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_data_manager.UserDataManager",
	HandlerType: (*UserDataManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLoginPasswordList",
			Handler:    _UserDataManager_GetLoginPasswordList_Handler,
		},
		{
			MethodName: "CreateLoginPassword",
			Handler:    _UserDataManager_CreateLoginPassword_Handler,
		},
		{
			MethodName: "GetLoginPasswordById",
			Handler:    _UserDataManager_GetLoginPasswordById_Handler,
		},
		{
			MethodName: "PatchLoginPasswordById",
			Handler:    _UserDataManager_PatchLoginPasswordById_Handler,
		},
		{
			MethodName: "DeleteLoginPasswordById",
			Handler:    _UserDataManager_DeleteLoginPasswordById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user-data-manager.proto",
}
