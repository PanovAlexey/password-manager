// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/storage.proto

package storage_grpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetLoginPasswordList(ctx context.Context, in *GetLoginPasswordListRequest, opts ...grpc.CallOption) (*GetLoginPasswordListResponse, error)
	CreateLoginPassword(ctx context.Context, in *CreateLoginPasswordRequest, opts ...grpc.CallOption) (*CreateLoginPasswordResponse, error)
	GetLoginPasswordById(ctx context.Context, in *GetLoginPasswordByIdRequest, opts ...grpc.CallOption) (*GetLoginPasswordByIdResponse, error)
	UpdateLoginPasswordById(ctx context.Context, in *UpdateLoginPasswordByIdRequest, opts ...grpc.CallOption) (*UpdateLoginPasswordByIdResponse, error)
	DeleteLoginPasswordById(ctx context.Context, in *DeleteLoginPasswordByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetCreditCardList(ctx context.Context, in *GetCreditCardListRequest, opts ...grpc.CallOption) (*GetCreditCardListResponse, error)
	CreateCreditCard(ctx context.Context, in *CreateCreditCardRequest, opts ...grpc.CallOption) (*CreateCreditCardResponse, error)
	GetCreditCardById(ctx context.Context, in *GetCreditCardByIdRequest, opts ...grpc.CallOption) (*GetCreditCardByIdResponse, error)
	UpdateCreditCardById(ctx context.Context, in *UpdateCreditCardByIdRequest, opts ...grpc.CallOption) (*UpdateCreditCardByIdResponse, error)
	DeleteCreditCardById(ctx context.Context, in *DeleteCreditCardByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetTextRecordList(ctx context.Context, in *GetTextRecordListRequest, opts ...grpc.CallOption) (*GetTextRecordListResponse, error)
	CreateTextRecord(ctx context.Context, in *CreateTextRecordRequest, opts ...grpc.CallOption) (*CreateTextRecordResponse, error)
	GetTextRecordById(ctx context.Context, in *GetTextRecordByIdRequest, opts ...grpc.CallOption) (*GetTextRecordByIdResponse, error)
	UpdateTextRecordById(ctx context.Context, in *UpdateTextRecordByIdRequest, opts ...grpc.CallOption) (*UpdateTextRecordByIdResponse, error)
	DeleteTextRecordById(ctx context.Context, in *DeleteTextRecordByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetBinaryRecordList(ctx context.Context, in *GetBinaryRecordListRequest, opts ...grpc.CallOption) (*GetBinaryRecordListResponse, error)
	CreateBinaryRecord(ctx context.Context, in *CreateBinaryRecordRequest, opts ...grpc.CallOption) (*CreateBinaryRecordResponse, error)
	GetBinaryRecordById(ctx context.Context, in *GetBinaryRecordByIdRequest, opts ...grpc.CallOption) (*GetBinaryRecordByIdResponse, error)
	UpdateBinaryRecordById(ctx context.Context, in *UpdateBinaryRecordByIdRequest, opts ...grpc.CallOption) (*UpdateBinaryRecordByIdResponse, error)
	DeleteBinaryRecordById(ctx context.Context, in *DeleteBinaryRecordByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetLoginPasswordList(ctx context.Context, in *GetLoginPasswordListRequest, opts ...grpc.CallOption) (*GetLoginPasswordListResponse, error) {
	out := new(GetLoginPasswordListResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetLoginPasswordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) CreateLoginPassword(ctx context.Context, in *CreateLoginPasswordRequest, opts ...grpc.CallOption) (*CreateLoginPasswordResponse, error) {
	out := new(CreateLoginPasswordResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/CreateLoginPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetLoginPasswordById(ctx context.Context, in *GetLoginPasswordByIdRequest, opts ...grpc.CallOption) (*GetLoginPasswordByIdResponse, error) {
	out := new(GetLoginPasswordByIdResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetLoginPasswordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdateLoginPasswordById(ctx context.Context, in *UpdateLoginPasswordByIdRequest, opts ...grpc.CallOption) (*UpdateLoginPasswordByIdResponse, error) {
	out := new(UpdateLoginPasswordByIdResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/UpdateLoginPasswordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteLoginPasswordById(ctx context.Context, in *DeleteLoginPasswordByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/storage.Storage/DeleteLoginPasswordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetCreditCardList(ctx context.Context, in *GetCreditCardListRequest, opts ...grpc.CallOption) (*GetCreditCardListResponse, error) {
	out := new(GetCreditCardListResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetCreditCardList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) CreateCreditCard(ctx context.Context, in *CreateCreditCardRequest, opts ...grpc.CallOption) (*CreateCreditCardResponse, error) {
	out := new(CreateCreditCardResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/CreateCreditCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetCreditCardById(ctx context.Context, in *GetCreditCardByIdRequest, opts ...grpc.CallOption) (*GetCreditCardByIdResponse, error) {
	out := new(GetCreditCardByIdResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetCreditCardById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdateCreditCardById(ctx context.Context, in *UpdateCreditCardByIdRequest, opts ...grpc.CallOption) (*UpdateCreditCardByIdResponse, error) {
	out := new(UpdateCreditCardByIdResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/UpdateCreditCardById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteCreditCardById(ctx context.Context, in *DeleteCreditCardByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/storage.Storage/DeleteCreditCardById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetTextRecordList(ctx context.Context, in *GetTextRecordListRequest, opts ...grpc.CallOption) (*GetTextRecordListResponse, error) {
	out := new(GetTextRecordListResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetTextRecordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) CreateTextRecord(ctx context.Context, in *CreateTextRecordRequest, opts ...grpc.CallOption) (*CreateTextRecordResponse, error) {
	out := new(CreateTextRecordResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/CreateTextRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetTextRecordById(ctx context.Context, in *GetTextRecordByIdRequest, opts ...grpc.CallOption) (*GetTextRecordByIdResponse, error) {
	out := new(GetTextRecordByIdResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetTextRecordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdateTextRecordById(ctx context.Context, in *UpdateTextRecordByIdRequest, opts ...grpc.CallOption) (*UpdateTextRecordByIdResponse, error) {
	out := new(UpdateTextRecordByIdResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/UpdateTextRecordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteTextRecordById(ctx context.Context, in *DeleteTextRecordByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/storage.Storage/DeleteTextRecordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetBinaryRecordList(ctx context.Context, in *GetBinaryRecordListRequest, opts ...grpc.CallOption) (*GetBinaryRecordListResponse, error) {
	out := new(GetBinaryRecordListResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetBinaryRecordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) CreateBinaryRecord(ctx context.Context, in *CreateBinaryRecordRequest, opts ...grpc.CallOption) (*CreateBinaryRecordResponse, error) {
	out := new(CreateBinaryRecordResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/CreateBinaryRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetBinaryRecordById(ctx context.Context, in *GetBinaryRecordByIdRequest, opts ...grpc.CallOption) (*GetBinaryRecordByIdResponse, error) {
	out := new(GetBinaryRecordByIdResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetBinaryRecordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdateBinaryRecordById(ctx context.Context, in *UpdateBinaryRecordByIdRequest, opts ...grpc.CallOption) (*UpdateBinaryRecordByIdResponse, error) {
	out := new(UpdateBinaryRecordByIdResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/UpdateBinaryRecordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteBinaryRecordById(ctx context.Context, in *DeleteBinaryRecordByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/storage.Storage/DeleteBinaryRecordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
// All implementations must embed UnimplementedStorageServer
// for forward compatibility
type StorageServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetLoginPasswordList(context.Context, *GetLoginPasswordListRequest) (*GetLoginPasswordListResponse, error)
	CreateLoginPassword(context.Context, *CreateLoginPasswordRequest) (*CreateLoginPasswordResponse, error)
	GetLoginPasswordById(context.Context, *GetLoginPasswordByIdRequest) (*GetLoginPasswordByIdResponse, error)
	UpdateLoginPasswordById(context.Context, *UpdateLoginPasswordByIdRequest) (*UpdateLoginPasswordByIdResponse, error)
	DeleteLoginPasswordById(context.Context, *DeleteLoginPasswordByIdRequest) (*empty.Empty, error)
	GetCreditCardList(context.Context, *GetCreditCardListRequest) (*GetCreditCardListResponse, error)
	CreateCreditCard(context.Context, *CreateCreditCardRequest) (*CreateCreditCardResponse, error)
	GetCreditCardById(context.Context, *GetCreditCardByIdRequest) (*GetCreditCardByIdResponse, error)
	UpdateCreditCardById(context.Context, *UpdateCreditCardByIdRequest) (*UpdateCreditCardByIdResponse, error)
	DeleteCreditCardById(context.Context, *DeleteCreditCardByIdRequest) (*empty.Empty, error)
	GetTextRecordList(context.Context, *GetTextRecordListRequest) (*GetTextRecordListResponse, error)
	CreateTextRecord(context.Context, *CreateTextRecordRequest) (*CreateTextRecordResponse, error)
	GetTextRecordById(context.Context, *GetTextRecordByIdRequest) (*GetTextRecordByIdResponse, error)
	UpdateTextRecordById(context.Context, *UpdateTextRecordByIdRequest) (*UpdateTextRecordByIdResponse, error)
	DeleteTextRecordById(context.Context, *DeleteTextRecordByIdRequest) (*empty.Empty, error)
	GetBinaryRecordList(context.Context, *GetBinaryRecordListRequest) (*GetBinaryRecordListResponse, error)
	CreateBinaryRecord(context.Context, *CreateBinaryRecordRequest) (*CreateBinaryRecordResponse, error)
	GetBinaryRecordById(context.Context, *GetBinaryRecordByIdRequest) (*GetBinaryRecordByIdResponse, error)
	UpdateBinaryRecordById(context.Context, *UpdateBinaryRecordByIdRequest) (*UpdateBinaryRecordByIdResponse, error)
	DeleteBinaryRecordById(context.Context, *DeleteBinaryRecordByIdRequest) (*empty.Empty, error)
	mustEmbedUnimplementedStorageServer()
}

// UnimplementedStorageServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (UnimplementedStorageServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedStorageServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedStorageServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedStorageServer) GetLoginPasswordList(context.Context, *GetLoginPasswordListRequest) (*GetLoginPasswordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginPasswordList not implemented")
}
func (UnimplementedStorageServer) CreateLoginPassword(context.Context, *CreateLoginPasswordRequest) (*CreateLoginPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoginPassword not implemented")
}
func (UnimplementedStorageServer) GetLoginPasswordById(context.Context, *GetLoginPasswordByIdRequest) (*GetLoginPasswordByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginPasswordById not implemented")
}
func (UnimplementedStorageServer) UpdateLoginPasswordById(context.Context, *UpdateLoginPasswordByIdRequest) (*UpdateLoginPasswordByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoginPasswordById not implemented")
}
func (UnimplementedStorageServer) DeleteLoginPasswordById(context.Context, *DeleteLoginPasswordByIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoginPasswordById not implemented")
}
func (UnimplementedStorageServer) GetCreditCardList(context.Context, *GetCreditCardListRequest) (*GetCreditCardListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditCardList not implemented")
}
func (UnimplementedStorageServer) CreateCreditCard(context.Context, *CreateCreditCardRequest) (*CreateCreditCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCreditCard not implemented")
}
func (UnimplementedStorageServer) GetCreditCardById(context.Context, *GetCreditCardByIdRequest) (*GetCreditCardByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditCardById not implemented")
}
func (UnimplementedStorageServer) UpdateCreditCardById(context.Context, *UpdateCreditCardByIdRequest) (*UpdateCreditCardByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCreditCardById not implemented")
}
func (UnimplementedStorageServer) DeleteCreditCardById(context.Context, *DeleteCreditCardByIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCreditCardById not implemented")
}
func (UnimplementedStorageServer) GetTextRecordList(context.Context, *GetTextRecordListRequest) (*GetTextRecordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTextRecordList not implemented")
}
func (UnimplementedStorageServer) CreateTextRecord(context.Context, *CreateTextRecordRequest) (*CreateTextRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTextRecord not implemented")
}
func (UnimplementedStorageServer) GetTextRecordById(context.Context, *GetTextRecordByIdRequest) (*GetTextRecordByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTextRecordById not implemented")
}
func (UnimplementedStorageServer) UpdateTextRecordById(context.Context, *UpdateTextRecordByIdRequest) (*UpdateTextRecordByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTextRecordById not implemented")
}
func (UnimplementedStorageServer) DeleteTextRecordById(context.Context, *DeleteTextRecordByIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTextRecordById not implemented")
}
func (UnimplementedStorageServer) GetBinaryRecordList(context.Context, *GetBinaryRecordListRequest) (*GetBinaryRecordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBinaryRecordList not implemented")
}
func (UnimplementedStorageServer) CreateBinaryRecord(context.Context, *CreateBinaryRecordRequest) (*CreateBinaryRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBinaryRecord not implemented")
}
func (UnimplementedStorageServer) GetBinaryRecordById(context.Context, *GetBinaryRecordByIdRequest) (*GetBinaryRecordByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBinaryRecordById not implemented")
}
func (UnimplementedStorageServer) UpdateBinaryRecordById(context.Context, *UpdateBinaryRecordByIdRequest) (*UpdateBinaryRecordByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBinaryRecordById not implemented")
}
func (UnimplementedStorageServer) DeleteBinaryRecordById(context.Context, *DeleteBinaryRecordByIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBinaryRecordById not implemented")
}
func (UnimplementedStorageServer) mustEmbedUnimplementedStorageServer() {}

// UnsafeStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServer will
// result in compilation errors.
type UnsafeStorageServer interface {
	mustEmbedUnimplementedStorageServer()
}

func RegisterStorageServer(s grpc.ServiceRegistrar, srv StorageServer) {
	s.RegisterService(&Storage_ServiceDesc, srv)
}

func _Storage_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetLoginPasswordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginPasswordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetLoginPasswordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetLoginPasswordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetLoginPasswordList(ctx, req.(*GetLoginPasswordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_CreateLoginPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoginPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreateLoginPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/CreateLoginPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreateLoginPassword(ctx, req.(*CreateLoginPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetLoginPasswordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginPasswordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetLoginPasswordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetLoginPasswordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetLoginPasswordById(ctx, req.(*GetLoginPasswordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdateLoginPasswordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoginPasswordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdateLoginPasswordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/UpdateLoginPasswordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdateLoginPasswordById(ctx, req.(*UpdateLoginPasswordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteLoginPasswordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoginPasswordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteLoginPasswordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DeleteLoginPasswordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteLoginPasswordById(ctx, req.(*DeleteLoginPasswordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetCreditCardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreditCardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetCreditCardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetCreditCardList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetCreditCardList(ctx, req.(*GetCreditCardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_CreateCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCreditCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreateCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/CreateCreditCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreateCreditCard(ctx, req.(*CreateCreditCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetCreditCardById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreditCardByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetCreditCardById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetCreditCardById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetCreditCardById(ctx, req.(*GetCreditCardByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdateCreditCardById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCreditCardByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdateCreditCardById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/UpdateCreditCardById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdateCreditCardById(ctx, req.(*UpdateCreditCardByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteCreditCardById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCreditCardByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteCreditCardById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DeleteCreditCardById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteCreditCardById(ctx, req.(*DeleteCreditCardByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetTextRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTextRecordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetTextRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetTextRecordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetTextRecordList(ctx, req.(*GetTextRecordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_CreateTextRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTextRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreateTextRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/CreateTextRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreateTextRecord(ctx, req.(*CreateTextRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetTextRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTextRecordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetTextRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetTextRecordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetTextRecordById(ctx, req.(*GetTextRecordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdateTextRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTextRecordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdateTextRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/UpdateTextRecordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdateTextRecordById(ctx, req.(*UpdateTextRecordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteTextRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTextRecordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteTextRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DeleteTextRecordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteTextRecordById(ctx, req.(*DeleteTextRecordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetBinaryRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBinaryRecordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetBinaryRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetBinaryRecordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetBinaryRecordList(ctx, req.(*GetBinaryRecordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_CreateBinaryRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBinaryRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreateBinaryRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/CreateBinaryRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreateBinaryRecord(ctx, req.(*CreateBinaryRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetBinaryRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBinaryRecordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetBinaryRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetBinaryRecordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetBinaryRecordById(ctx, req.(*GetBinaryRecordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdateBinaryRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBinaryRecordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdateBinaryRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/UpdateBinaryRecordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdateBinaryRecordById(ctx, req.(*UpdateBinaryRecordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteBinaryRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBinaryRecordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteBinaryRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DeleteBinaryRecordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteBinaryRecordById(ctx, req.(*DeleteBinaryRecordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Storage_ServiceDesc is the grpc.ServiceDesc for Storage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Storage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Storage_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Storage_UpdateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Storage_GetUser_Handler,
		},
		{
			MethodName: "GetLoginPasswordList",
			Handler:    _Storage_GetLoginPasswordList_Handler,
		},
		{
			MethodName: "CreateLoginPassword",
			Handler:    _Storage_CreateLoginPassword_Handler,
		},
		{
			MethodName: "GetLoginPasswordById",
			Handler:    _Storage_GetLoginPasswordById_Handler,
		},
		{
			MethodName: "UpdateLoginPasswordById",
			Handler:    _Storage_UpdateLoginPasswordById_Handler,
		},
		{
			MethodName: "DeleteLoginPasswordById",
			Handler:    _Storage_DeleteLoginPasswordById_Handler,
		},
		{
			MethodName: "GetCreditCardList",
			Handler:    _Storage_GetCreditCardList_Handler,
		},
		{
			MethodName: "CreateCreditCard",
			Handler:    _Storage_CreateCreditCard_Handler,
		},
		{
			MethodName: "GetCreditCardById",
			Handler:    _Storage_GetCreditCardById_Handler,
		},
		{
			MethodName: "UpdateCreditCardById",
			Handler:    _Storage_UpdateCreditCardById_Handler,
		},
		{
			MethodName: "DeleteCreditCardById",
			Handler:    _Storage_DeleteCreditCardById_Handler,
		},
		{
			MethodName: "GetTextRecordList",
			Handler:    _Storage_GetTextRecordList_Handler,
		},
		{
			MethodName: "CreateTextRecord",
			Handler:    _Storage_CreateTextRecord_Handler,
		},
		{
			MethodName: "GetTextRecordById",
			Handler:    _Storage_GetTextRecordById_Handler,
		},
		{
			MethodName: "UpdateTextRecordById",
			Handler:    _Storage_UpdateTextRecordById_Handler,
		},
		{
			MethodName: "DeleteTextRecordById",
			Handler:    _Storage_DeleteTextRecordById_Handler,
		},
		{
			MethodName: "GetBinaryRecordList",
			Handler:    _Storage_GetBinaryRecordList_Handler,
		},
		{
			MethodName: "CreateBinaryRecord",
			Handler:    _Storage_CreateBinaryRecord_Handler,
		},
		{
			MethodName: "GetBinaryRecordById",
			Handler:    _Storage_GetBinaryRecordById_Handler,
		},
		{
			MethodName: "UpdateBinaryRecordById",
			Handler:    _Storage_UpdateBinaryRecordById_Handler,
		},
		{
			MethodName: "DeleteBinaryRecordById",
			Handler:    _Storage_DeleteBinaryRecordById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/storage.proto",
}
